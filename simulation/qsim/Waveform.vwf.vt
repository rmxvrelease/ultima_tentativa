// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2025 13:30:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [31:0] instrucao;
// wires                                               
wire [31:0] reg0;
wire [31:0] reg1;
wire [31:0] reg2;
wire [31:0] reg3;

// assign statements (if any)                          
processador i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.instrucao(instrucao),
	.reg0(reg0),
	.reg1(reg1),
	.reg2(reg2),
	.reg3(reg3)
);
initial 
begin 
#1000000 $finish;
end 
// instrucao[ 31 ]
initial
begin
	instrucao[31] = 1'b0;
end 
// instrucao[ 30 ]
initial
begin
	instrucao[30] = 1'b0;
end 
// instrucao[ 29 ]
initial
begin
	instrucao[29] = 1'b0;
end 
// instrucao[ 28 ]
initial
begin
	instrucao[28] = 1'b0;
end 
// instrucao[ 27 ]
initial
begin
	instrucao[27] = 1'b0;
end 
// instrucao[ 26 ]
initial
begin
	instrucao[26] = 1'b0;
end 
// instrucao[ 25 ]
initial
begin
	instrucao[25] = 1'b0;
end 
// instrucao[ 24 ]
initial
begin
	instrucao[24] = 1'b0;
end 
// instrucao[ 23 ]
initial
begin
	instrucao[23] = 1'b0;
end 
// instrucao[ 22 ]
initial
begin
	instrucao[22] = 1'b0;
end 
// instrucao[ 21 ]
initial
begin
	instrucao[21] = 1'b0;
end 
// instrucao[ 20 ]
initial
begin
	instrucao[20] = 1'b0;
end 
// instrucao[ 19 ]
initial
begin
	instrucao[19] = 1'b0;
end 
// instrucao[ 18 ]
initial
begin
	instrucao[18] = 1'b0;
end 
// instrucao[ 17 ]
initial
begin
	instrucao[17] = 1'b0;
end 
// instrucao[ 16 ]
initial
begin
	instrucao[16] = 1'b1;
end 
// instrucao[ 15 ]
initial
begin
	instrucao[15] = 1'b0;
end 
// instrucao[ 14 ]
initial
begin
	instrucao[14] = 1'b0;
end 
// instrucao[ 13 ]
initial
begin
	instrucao[13] = 1'b0;
end 
// instrucao[ 12 ]
initial
begin
	instrucao[12] = 1'b0;
end 
// instrucao[ 11 ]
initial
begin
	instrucao[11] = 1'b0;
end 
// instrucao[ 10 ]
initial
begin
	instrucao[10] = 1'b0;
end 
// instrucao[ 9 ]
initial
begin
	instrucao[9] = 1'b0;
end 
// instrucao[ 8 ]
initial
begin
	instrucao[8] = 1'b1;
end 
// instrucao[ 7 ]
initial
begin
	instrucao[7] = 1'b0;
end 
// instrucao[ 6 ]
initial
begin
	instrucao[6] = 1'b0;
end 
// instrucao[ 5 ]
initial
begin
	instrucao[5] = 1'b0;
end 
// instrucao[ 4 ]
initial
begin
	instrucao[4] = 1'b0;
end 
// instrucao[ 3 ]
initial
begin
	instrucao[3] = 1'b0;
end 
// instrucao[ 2 ]
initial
begin
	instrucao[2] = 1'b0;
end 
// instrucao[ 1 ]
initial
begin
	instrucao[1] = 1'b0;
end 
// instrucao[ 0 ]
initial
begin
	instrucao[0] = 1'b0;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
endmodule

